import path ;
import doxygen : doxygen ;

import shader : program ;

use-project /liblogging : ../liblogging ;

lib GL : : <name>:libGL.so.1 ;
lib GLU ;
lib glfw ;
lib boost_thread : : <search>/usr/local/lib ;
lib boost_program_options : : <search>/usr/local/lib ;
lib boost_filesystem : : <search>/usr/local/lib ;
lib boost_regex : : <search>/usr/local/lib ;
lib boost_iostreams : : <search>/usr/local/lib ;
lib boost_date_time : : <search>/usr/local/lib ;
lib boost_system : : <search>/usr/local/lib ;
lib boost_log : : <search>/usr/local/lib ;

project gtulu : requirements
  <library>GL/<link>shared
  <library>GLU/<link>shared
  <library>glfw/<link>shared
  <library>boost_thread
  <library>boost_program_options
  <library>boost_filesystem
  <library>boost_regex
  <library>boost_iostreams
  <library>boost_date_time
  <library>boost_system
  <library>boost_log
  <library>/liblogging//logging
  <include>../liblogging/include/
  <include>include/
  <threading>multi
  <variant>debug:<define>GTULU_DEBUG
  <variant>release:<define>NO_GTULU_DEBUG
  <cflags>-std=c++0x
  <cflags>-Wno-multichar
  ;

path-constant TOP : . ;

rule objs ( sources + : properties * ) {
  for local name in $(sources) {
    name_o = [ MATCH "^$(TOP)/(.+).cpp$" : $(name) ] ;
    if ! $(name_o) {
      name_o = [ MATCH "^$(TOP)/(.+)$" : $(name) ] ;
      name_o = $(name_o).o ;
    }
    objects += $(name_o) ;
    obj $(name_o) : $(name) : $(properties) ;
  }
  
  return $(objects) ;
}


gtulu_src = [ path.glob-tree $(TOP)/src/gtulu : *.cpp ] ;
alias gtulu_objs : [ objs $(gtulu_src) ] ;

lib gtulu
    : gtulu_objs ;

obj common : src/common.cpp ;

exe compiler
    : src/compile.cpp common gtulu  
    : <link>shared
    ;

    

install bin_dist 
    : compiler
    : <location>./dist/ ;
    
      
install lib64so_dist 
    : gtulu
    : <location>./dist/lib64/
      <link>shared ;
    
    
    
program test1 : test/shaders/test1.vs test/shaders/test1.fs : <location>test/generated/ ;
program test2 : test/shaders/test2.vs test/shaders/test2.fs : <location>test/generated/ ;
program test3 : test/shaders/test3.vs test/shaders/test3.fs : <location>test/generated/ ;

exe test1exe : test/test1.cpp test1 common gtulu : <link>shared ;
exe test2exe : test/test2.cpp test2 common gtulu : <link>shared ;
exe test3exe : test/test3.cpp test3 common gtulu : <link>shared ;
    
    
#install lib32so_dist 
#    : gtulu
#    : <location>./dist/lib32/
#      <link>shared 
#      <architecture>x86
#      <address-model>32 ;
      
#install lib64a_dist 
#    : gtulu
#    : <location>./dist/lib64/
#      <link>static ;

#install lib32a_dist 
#    : gtulu
#    : <location>./dist/lib32/
#      <link>static 
#      <architecture>x86
#      <address-model>32 ;
