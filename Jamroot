import shader : program ;
import path ;
import os ;
import common ;
import modules ;

constant VERSION : 0.0.1 ;
rule tag ( name : type ? : property-set ) {
  if $(type) in STATIC_LIB SHARED_LIB IMPORT_LIB {
    local result = [ common.format-name <base> : $(name) : $(type) : $(property-set) ] ;

    if $(type) = SHARED_LIB && (
       ! ( [ $(property-set).get <target-os> ] in windows cygwin darwin aix ) &&
       ! ( [ $(property-set).get <toolset> ] in pgi ) ) {
      result = $(result).$(VERSION)  ;
    }

    return $(result) ;
  }    
}

local default_address_model = 32 ;
if [ os.platform ] = X86_64 {
  default_address_model = 64 ;
}
modules.poke default_address_model : $(default_address_model) ;

path-constant HOME : ../.. ;
path-constant DESTDIR : $(HOME) ;
path-constant TOP : . ;
constant SEARCH : <address-model>64:<search>$(HOME)/lib
                  <address-model>64:<search>/usr/local/lib
                  <address-model>32:<search>$(HOME)/lib32
                  <address-model>32:<search>/usr/local/lib32 ;

lib GL : : $(SEARCH) <name>:libGL.so.1 ;
lib GLU : : $(SEARCH) ;
lib glfw : : $(SEARCH) ;
lib boost_thread : : $(SEARCH) ;
lib boost_program_options : : $(SEARCH) ;
lib boost_filesystem : : $(SEARCH) ;
lib boost_regex : : $(SEARCH) ;
lib boost_iostreams : : $(SEARCH) ;
lib boost_date_time : : $(SEARCH) ;
lib boost_system : : $(SEARCH) ;
lib boost_log : : $(SEARCH) ;
lib logging : : $(SEARCH) ;
lib glut : : $(SEARCH) ;
lib X11 : : $(SEARCH) ;
lib Xrandr : : $(SEARCH) ;

project gtulu : requirements
  <library>GL/<link>shared
  <library>GLU
  <library>glfw
  <library>boost_thread
  <library>boost_program_options
  <library>boost_filesystem
  <library>boost_regex
  <library>boost_iostreams
  <library>boost_date_time
  <library>boost_system
  <library>boost_log
  <library>logging
  <include>include/
  <include>$(HOME)/include/
  <include>/usr/local/include/
  
  <tag>@$(__name__).tag
  
  <address-model>64:<architecture>x86
  <address-model>64:<instruction-set>athlon64
  <address-model>32:<architecture>x86
  <address-model>32:<instruction-set>i686
  
  <threading>multi
  <variant>debug:<define>GTULU_DEBUG
  <variant>release:<define>NO_GTULU_DEBUG
  <cflags>-std=c++0x
  <cflags>-Wno-multichar
  : default-build debug ;


rule for-each ( rule : suffix ? : sources * : dependencies * : properties * ) {
  for local name in $(sources) {
    name_o = [ MATCH "^$(TOP)/(.+).cpp$" : $(name) ] ;
    if ! $(name_o) {
      name_o = [ MATCH "^$(TOP)/(.+)$" : $(name) ] ;
      name_o = $(name_o)$(suffix) ;
    }
    if ! $(name_o) {
      name_o = [ MATCH "^(.+)$" : $(name) ] ;
      name_o = $(name_o)$(suffix) ;
    }
    objects += $(name_o) ;
    $(rule) $(name_o) : $(name) $(dependencies) : $(properties) ;
  }
  
  return $(objects) ;
}

obj common : src/common.cpp ;

lib gtulu : [ for-each obj : : [ path.glob-tree $(TOP)/src/gtulu : *.cpp ] : : ]
    : <address-model>$(default_address_model) ;
exe compiler : src/compile.cpp common gtulu
    : <address-model>$(default_address_model) ;

install install_include
    : [ path.glob-tree include/ : *.* : ]
    : <location>$(DESTDIR)/include/
      <install-source-root>./include/ ;

install install_lib64
    : gtulu
    : <location>$(DESTDIR)/lib/
      <address-model>64 ;

install install_lib32
    : gtulu
    : <location>$(DESTDIR)/lib32/
      <address-model>32 ;

install install_bin 
    : compiler
    : <location>$(DESTDIR)/bin/ ;

program test1 : test/shaders/test1.vs test/shaders/test1.fs : <location>test/generated/ ;
program test2 : test/shaders/test2.vs test/shaders/test2.fs : <location>test/generated/ ;
program test3 : test/shaders/test3.vs test/shaders/test3.fs : <location>test/generated/ ;

exe test1exe : test/test1.cpp test1 common gtulu
    : <address-model>$(default_address_model) ;
exe test2exe : test/test2.cpp test2 common gtulu
    : <address-model>$(default_address_model) ;
exe test3exe : test/test3.cpp test3 common gtulu
    : <address-model>$(default_address_model) ;

alias build : gtulu compiler ;
alias test : test1exe/<link>shared
             test2exe/<link>shared
             test3exe/<link>shared
             test1exe/<link>static
             test2exe/<link>static
             test3exe/<link>static ;
alias install : install_lib64/<link>shared
                install_lib64/<link>static
                install_lib32/<link>shared
                install_lib32/<link>static
                install_include
                install_bin ;