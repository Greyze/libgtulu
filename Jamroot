# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt

import shader : program ;
import fhs ;

lib GL : : $(LIB_SEARCH) <name>:libGL.so.1 ;
lib GLU : : $(LIB_SEARCH) ;
lib glfw : : $(LIB_SEARCH) ;
lib boost_thread : : $(LIB_SEARCH) ;
lib boost_program_options : : $(LIB_SEARCH) ;
lib boost_filesystem : : $(LIB_SEARCH) ;
lib boost_regex : : $(LIB_SEARCH) ;
lib boost_iostreams : : $(LIB_SEARCH) ;
lib boost_date_time : : $(LIB_SEARCH) ;
lib boost_system : : $(LIB_SEARCH) ;
lib boost_log : : $(LIB_SEARCH) ;
lib logging : : $(LIB_SEARCH) ;
lib glut : : $(LIB_SEARCH) ;
lib X11 : : $(LIB_SEARCH) ;
lib Xrandr : : $(LIB_SEARCH) ;

project libgtulu : requirements
  <library>GL/<link>shared
  <library>GLU
  <library>glfw
  <library>boost_thread
  <library>boost_program_options
  <library>boost_filesystem
  <library>boost_regex
  <library>boost_iostreams
  <library>boost_date_time
  <library>boost_system
  <library>boost_log
  <library>logging
  <include>include/
  
  $(INCLUDES)
  <tag>@$(__name__).tag
  <address-model>32:<instruction-set>i686
  
  <threading>multi
  <variant>debug:<define>GTULU_DEBUG
  <variant>release:<define>NO_GTULU_DEBUG
  <cflags>-std=c++0x
  <cflags>-Wno-multichar
  : default-build debug ;


rule for-each ( rule : suffix ? : sources * : dependencies * : properties * ) {
  for local name in $(sources) {
    name_o = [ MATCH "^$(BUILD_ROOT)/(.+).cpp$" : $(name) ] ;
    if ! $(name_o) {
      name_o = [ MATCH "^$(BUILD_ROOT)/(.+)$" : $(name) ] ;
      name_o = $(name_o)$(suffix) ;
    }
    if ! $(name_o) {
      name_o = [ MATCH "^(.+)$" : $(name) ] ;
      name_o = $(name_o)$(suffix) ;
    }
    objects += $(name_o) ;
    $(rule) $(name_o) : $(name) $(dependencies) : $(properties) ;
  }
  
  return $(objects) ;
}

obj common : src/common.cpp ;

lib gtulu : [ for-each obj : : [ path.glob-tree $(BUILD_ROOT)/src/gtulu : *.cpp ] : : ] ;
exe compiler : src/compile.cpp common gtulu ;

program test1 : test/shaders/test1.vs test/shaders/test1.fs : <location>test/generated/ ;
program test2 : test/shaders/test2.vs test/shaders/test2.fs : <location>test/generated/ ;
program test3 : test/shaders/test3.vs test/shaders/test3.fs : <location>test/generated/ ;

exe test1exe : test/test1.cpp test1 common gtulu
    : <address-model>$(default_address_model) ;
exe test2exe : test/test2.cpp test2 common gtulu
    : <address-model>$(default_address_model) ;
exe test3exe : test/test3.cpp test3 common gtulu
    : <address-model>$(default_address_model) ;

alias test : test1exe/<link>shared
             test2exe/<link>shared
             test3exe/<link>shared
             test1exe/<link>static
             test2exe/<link>static
             test3exe/<link>static ;


fhs.build build libgtulu
                : compiler
                : gtulu
                : ;

fhs.install install libgtulu 
                    : compiler
                    : gtulu
                    : [ path.glob-tree include/ : *.* : ]
                    : <install-source-root>./include/ ;