# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE or copy at http://www.boost.org/LICENSE

import multiarch ;
import path ;
import shader ;
import testing ;

lib GL : : [ multiarch.search-path ] <name>:libGL.so.1 ;
lib GLU : : [ multiarch.search-path ] ;
lib glfw : : [ multiarch.search-path ] ;
lib jpeg : : [ multiarch.search-path ] ;
lib png : : [ multiarch.search-path ] ;
lib boost_thread : : [ multiarch.search-path ] ;
lib boost_program_options : : [ multiarch.search-path ] ;
lib boost_filesystem : : [ multiarch.search-path ] ;
lib boost_regex : : [ multiarch.search-path ] ;
lib boost_iostreams : : [ multiarch.search-path ] ;
lib boost_date_time : : [ multiarch.search-path ] ;
lib boost_system : : [ multiarch.search-path ] ;
lib boost_log : : [ multiarch.search-path ] ;
lib logging : : [ multiarch.search-path ] ;
lib glut : : [ multiarch.search-path ] ;
lib X11 : : [ multiarch.search-path ] ;
lib xcb : : [ multiarch.search-path ] ;
lib Xau : : [ multiarch.search-path ] ;
lib Xdmcp : : [ multiarch.search-path ] ;

project libgtulu : requirements
  <library>GL/<link>shared
  <library>GLU
  <library>X11
  <library>xcb
  <library>Xau
  <library>Xdmcp
  <library>glfw
  <library>boost_thread
  <library>boost_program_options
  <library>boost_filesystem
  <library>boost_regex
  <library>boost_iostreams
  <library>boost_date_time
  <library>boost_system
  <library>boost_log
  <library>logging
  <include>include/
  
  $(INCLUDES)
  <tag>@$(__name__).tag
  
  <threading>multi
  <variant>debug:<define>GTULU_DEBUG
  <variant>release:<define>NO_GTULU_DEBUG
  <cflags>-std=c++0x
  <cflags>-Wno-multichar
  <cflags>-DGTULU_USE_LIBLOGGING
  <cflags>"`pkg-config --cflags pangocairo`"
  <linkflags>"`pkg-config --libs pangocairo`"
  : default-build debug ;


rule for-each ( rule : suffix ? : sources * : dependencies * : properties * ) {
  for local name in $(sources) {
    name_o = [ MATCH "^$(BUILD_ROOT)/(.+).cpp$" : $(name) ] ;
    if ! $(name_o) {
      name_o = [ MATCH "^$(BUILD_ROOT)/(.+)$" : $(name) ] ;
      name_o = $(name_o)$(suffix) ;
    }
    if ! $(name_o) {
      name_o = [ MATCH "^(.+)$" : $(name) ] ;
      name_o = $(name_o)$(suffix) ;
    }
    objects += $(name_o) ;
    $(rule) $(name_o) : $(name) $(dependencies) : $(properties) ;
  }
  
  return $(objects) ;
}

cpp-pch gtulu_opengl_pch.hpp : include/gtulu_opengl_pch.hpp ;

obj common : src/lib/common.cpp gtulu_opengl_pch.hpp ;

lib gtulu : [ path.glob-tree src/lib/gtulu/ : *.cpp : ] gtulu_opengl_pch.hpp ;
exe gtulu-compiler : src/bin/compile.cpp common gtulu gtulu_opengl_pch.hpp : <link>shared ;

shader.program test1 : test/shaders/test1.vs test/shaders/test1.fs : <location>test/generated/ ;
shader.program test2 : test/shaders/test2.vs test/shaders/test2.fs : <location>test/generated/ ;
shader.program test3 : test/shaders/test3.vs test/shaders/test3.fs : <location>test/generated/ ;
shader.program print_image : test/shaders/print_image.vs test/shaders/print_image.fs : <location>test/generated/ ;

unit-test test1exe : test/test1.cpp test1 common gtulu gtulu_opengl_pch.hpp : <link>shared ;
unit-test test2exe : test/test2.cpp test2 common gtulu gtulu_opengl_pch.hpp : <link>shared ;
unit-test test3exe : test/test3.cpp test3 common gtulu gtulu_opengl_pch.hpp : <link>shared ;
unit-test print_imageexe : test/print_image.cpp print_image common gtulu gtulu_opengl_pch.hpp jpeg png : <link>shared ;
unit-test pango_test : test/pango_test.cpp print_image common gtulu gtulu_opengl_pch.hpp png : <link>shared ;

alias test : test1exe/<link>shared
             test2exe/<link>shared
             test3exe/<link>shared
             print_imageexe/<link>shared
             pango_test/<link>shared ;

multiarch.build build libgtulu
                : gtulu-compiler
                : gtulu test
                : ;

multiarch.install install libgtulu 
                    : gtulu-compiler
                    : gtulu
                    : [ path.glob-tree include/ : *.* : ]
                    : <install-source-root>./include/ ;
